object VacuumWorld:
  val vacuumWorld: Kripke = Kripke()
  val s1 = State("s1", Set("inA"), true)
  val s2 = State("s2", Set("inB"))
  val s3 = State("s3", Set("inA", "cleanA"))
  val s4 = State("s4", Set("inA", "cleanB"))
  val s5 = State("s5", Set("inA", "cleanA", "cleanB"))
  val s6 = State("s6", Set("inB", "cleanA"))
  val s7 = State("s7", Set("inB", "cleanB"))
  val s8 = State("s8", Set("inB", "cleanA", "cleanB"))

  vacuumWorld.path(true, s1, s2)
  vacuumWorld.path(true, s3, s6)
  vacuumWorld.path(true, s4, s7)
  vacuumWorld.path(true, s5, s8)
  vacuumWorld.path(false, s1, s3, s6, s8)
  vacuumWorld.path(false, s2, s7, s4, s5)
  vacuumWorld.add_reflexive()

object RocketWorld:
  val rocketWorld: Kripke = Kripke()
  val s1 = State("s1", Set("roL", "nofuel", "caL"), true)
  val s2 = State("s2", Set("roL", "fuelOK", "caL"))
  val s3 = State("s3", Set("roP", "nofuel", "caL"))
  val s4 = State("s4", Set("roP", "fuelOK", "caL"))
  val s5 = State("s5", Set("roL", "nofuel", "caR"))
  val s6 = State("s6", Set("roL", "fuelOK", "caR"))
  val s7 = State("s7", Set("roP", "nofuel", "caR"))
  val s8 = State("s8", Set("roP", "fuelOK", "caR"))
  val s9 = State("s9", Set("roL", "nofuel", "caP"))
  val s10 = State("s10", Set("roL", "fuelOK", "caP"))
  val s11 = State("s11", Set("roP", "nofuel", "caP"))
  val s12 = State("s12", Set("roP", "fuelOK", "caP"))
  
  rocketWorld.path(true, s1, s2, s3, s4)
  rocketWorld.path(true, s5, s6, s7, s8)
  rocketWorld.path(true, s9, s10, s11, s12)
  rocketWorld.path(false, s5, s1, s6, s2)
  rocketWorld.path(false, s1, s5, s2, s6)
  rocketWorld.path(false, s11, s7, s12, s8)
  rocketWorld.path(false, s7, s11, s8, s12)
  rocketWorld.add_reflexive()

